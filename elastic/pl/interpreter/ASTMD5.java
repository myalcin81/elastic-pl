package elastic.pl.interpreter;
/* Generated By:JJTree: Do not edit this line. ASTMD5.java Version 6.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=true,NODE_PREFIX=AST,NODE_EXTENDS=MyNode,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */

public class ASTMD5 extends SimpleNode {

	private static final int INIT_A = 0x67452301;
	private static final int INIT_B = (int) 0xEFCDAB89L;
	private static final int INIT_C = (int) 0x98BADCFEL;
	private static final int INIT_D = 0x10325476;

	private static final int[] SHIFT_AMTS = { 7, 12, 17, 22, 5, 9, 14, 20, 4, 11, 16, 23, 6, 10, 15, 21 };

	private static final int[] TABLE_T = new int[64];
	static {
		for (int i = 0; i < 64; i++)
			TABLE_T[i] = (int) (long) ((1L << 32) * Math.abs(Math.sin(i + 1)));
	}

	public byte[] computeMD5(byte[] message) {
		int messageLenBytes = message.length;
		int numBlocks = ((messageLenBytes + 8) >>> 6) + 1;
		int totalLen = numBlocks << 6;
		byte[] paddingBytes = new byte[totalLen - messageLenBytes];
		paddingBytes[0] = (byte) 0x80;

		long messageLenBits = (long) messageLenBytes << 3;
		for (int i = 0; i < 8; i++) {
			paddingBytes[paddingBytes.length - 8 + i] = (byte) messageLenBits;
			messageLenBits >>>= 8;
		}

		int a = INIT_A;
		int b = INIT_B;
		int c = INIT_C;
		int d = INIT_D;
		int[] buffer = new int[16];
		for (int i = 0; i < numBlocks; i++) {
			int index = i << 6;
			for (int j = 0; j < 64; j++, index++)
				buffer[j >>> 2] = ((int) ((index < messageLenBytes) ? message[index]
						: paddingBytes[index - messageLenBytes]) << 24) | (buffer[j >>> 2] >>> 8);
			int originalA = a;
			int originalB = b;
			int originalC = c;
			int originalD = d;
			for (int j = 0; j < 64; j++) {
				int div16 = j >>> 4;
				int f = 0;
				int bufferIndex = j;
				switch (div16) {
				case 0:
					f = (b & c) | (~b & d);
					break;

				case 1:
					f = (b & d) | (c & ~d);
					bufferIndex = (bufferIndex * 5 + 1) & 0x0F;
					break;

				case 2:
					f = b ^ c ^ d;
					bufferIndex = (bufferIndex * 3 + 5) & 0x0F;
					break;

				case 3:
					f = c ^ (b | ~d);
					bufferIndex = (bufferIndex * 7) & 0x0F;
					break;
				}
				int temp = b + Integer.rotateLeft(a + f + buffer[bufferIndex] + TABLE_T[j],
						SHIFT_AMTS[(div16 << 2) | (j & 3)]);
				a = d;
				d = c;
				c = b;
				b = temp;
			}

			a += originalA;
			b += originalB;
			c += originalC;
			d += originalD;
		}

		byte[] md5 = new byte[16];
		int count = 0;
		for (int i = 0; i < 4; i++) {
			int n = (i == 0) ? a : ((i == 1) ? b : ((i == 2) ? c : d));
			for (int j = 0; j < 4; j++) {
				md5[count++] = (byte) n;
				n >>>= 8;
			}
		}
		return md5;
	}

	

	public ASTMD5(int id) {
		super(id);
	}

	public ASTMD5(ElasticPLParser p, int id) {
		super(p, id);
	}

	public void interpret() {

		// check when to do nothing
		Integer position_to_start = new Integer(((ASTIntConstNode)jjtGetChild(0)).val);
		Integer byte_length = new Integer(((ASTIntConstNode)jjtGetChild(1)).val);

		int max_bytes_state = 256 * 4; // 256 integers with 4 bytes each
		int hash_length_bytes = 16;
		int hash_length_full_int = (int) Math.ceil(((double) hash_length_bytes) / 4.0);
		int bytes_length_full_int = (int) Math.ceil(((double) byte_length) / 4.0);

		if (position_to_start >= (max_bytes_state - hash_length_full_int)) {
			// Do nothing, invalid arguments ( memory beginning at position
			// cannot hold resulting hash)
			return;
		}
		if (position_to_start + bytes_length_full_int >= max_bytes_state) {
			// Do nothing, invalid arguments (cannot scan requested byte range
			// as it would go beyond the end of the state)
			return;
		}

		byte[] result = this.computeMD5(this.StateIntToBytes(position_to_start, byte_length));
		bytesBackToState(result, position_to_start);
	}
	public long weight(){
    	return 80L;
  	}
  	  public long getConsumedStackUsage(){
      return 2L;
    }
}
/*
 * JavaCC - OriginalChecksum=834e6b392c29bdde9f97d7660804c8fb (do not edit this
 * line)
 */
