/* ElasticPLParser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. ElasticPLParser.java */
package elastic.pl.interpreter;

public class ElasticPLParser/*@bgen(jjtree)*/implements ElasticPLParserTreeConstants, ElasticPLParserConstants {/*@bgen(jjtree)*/
  protected JJTElasticPLParserState jjtree = new JJTElasticPLParserState();public Node rootNode() {
    return jjtree.rootNode();
  }

  final public void CompilationUnit() throws ParseException {/*@bgen(jjtree) CompilationUnit */
   ASTCompilationUnit jjtn000 = new ASTCompilationUnit(JJTCOMPILATIONUNIT);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
   jjtn000.jjtSetFirstToken(getToken(1));String name;
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 35:
        case 39:
        case 40:
        case 42:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        Statement();
      }
      VerifyStatement();
      jj_consume_token(0);
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void Expression() throws ParseException {
    ConditionalOrExpression();
  }

  final public void Assignment() throws ParseException {/*@bgen(jjtree) Assignment */
  ASTAssignment jjtn000 = new ASTAssignment(JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      Id();
      jj_consume_token(7);
      AdditiveExpression();
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void ConditionalOrExpression() throws ParseException {
    ConditionalAndExpression();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 8:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      jj_consume_token(8);
ASTOrNode jjtn001 = new ASTOrNode(JJTORNODE);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtn001.jjtSetFirstToken(getToken(1));
      try {
        ConditionalAndExpression();
      } catch (Throwable jjte001) {
if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte001;}
           }
           if (jjte001 instanceof ParseException) {
             {if (true) throw (ParseException)jjte001;}
           }
           {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
             jjtree.closeNodeScope(jjtn001,  2);
             jjtn001.jjtSetLastToken(getToken(0));
           }
      }
    }
  }

  final public void ConditionalAndExpression() throws ParseException {
    InclusiveOrExpression();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 9:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      jj_consume_token(9);
ASTAndNode jjtn001 = new ASTAndNode(JJTANDNODE);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtn001.jjtSetFirstToken(getToken(1));
      try {
        InclusiveOrExpression();
      } catch (Throwable jjte001) {
if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte001;}
           }
           if (jjte001 instanceof ParseException) {
             {if (true) throw (ParseException)jjte001;}
           }
           {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
             jjtree.closeNodeScope(jjtn001,  2);
             jjtn001.jjtSetLastToken(getToken(0));
           }
      }
    }
  }

  final public void InclusiveOrExpression() throws ParseException {
    ExclusiveOrExpression();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 10:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_4;
      }
      jj_consume_token(10);
ASTBitwiseOrNode jjtn001 = new ASTBitwiseOrNode(JJTBITWISEORNODE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtn001.jjtSetFirstToken(getToken(1));
      try {
        ExclusiveOrExpression();
      } catch (Throwable jjte001) {
if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
            jjtn001.jjtSetLastToken(getToken(0));
          }
      }
    }
  }

  final public void ExclusiveOrExpression() throws ParseException {
    AndExpression();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 11:{
        ;
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        break label_5;
      }
      jj_consume_token(11);
ASTBitwiseXorNode jjtn001 = new ASTBitwiseXorNode(JJTBITWISEXORNODE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtn001.jjtSetFirstToken(getToken(1));
      try {
        AndExpression();
      } catch (Throwable jjte001) {
if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
            jjtn001.jjtSetLastToken(getToken(0));
          }
      }
    }
  }

  final public void AndExpression() throws ParseException {
    EqualityExpression();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 12:{
        ;
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        break label_6;
      }
      jj_consume_token(12);
ASTBitwiseAndNode jjtn001 = new ASTBitwiseAndNode(JJTBITWISEANDNODE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtn001.jjtSetFirstToken(getToken(1));
      try {
        EqualityExpression();
      } catch (Throwable jjte001) {
if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
            jjtn001.jjtSetLastToken(getToken(0));
          }
      }
    }
  }

  final public void EqualityExpression() throws ParseException {
    RelationalExpression();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 13:
      case 14:{
        ;
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 13:{
        jj_consume_token(13);
ASTEQNode jjtn001 = new ASTEQNode(JJTEQNODE);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtn001.jjtSetFirstToken(getToken(1));
        try {
          RelationalExpression();
        } catch (Throwable jjte001) {
if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte001;}
            }
            if (jjte001 instanceof ParseException) {
              {if (true) throw (ParseException)jjte001;}
            }
            {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  2);
              jjtn001.jjtSetLastToken(getToken(0));
            }
        }
        break;
        }
      case 14:{
        jj_consume_token(14);
ASTNENode jjtn002 = new ASTNENode(JJTNENODE);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            jjtn002.jjtSetFirstToken(getToken(1));
        try {
          RelationalExpression();
        } catch (Throwable jjte002) {
if (jjtc002) {
              jjtree.clearNodeScope(jjtn002);
              jjtc002 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte002 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte002;}
            }
            if (jjte002 instanceof ParseException) {
              {if (true) throw (ParseException)jjte002;}
            }
            {if (true) throw (Error)jjte002;}
        } finally {
if (jjtc002) {
              jjtree.closeNodeScope(jjtn002,  2);
              jjtn002.jjtSetLastToken(getToken(0));
            }
        }
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void RelationalExpression() throws ParseException {
    AdditiveExpression();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 15:
      case 16:
      case 17:
      case 18:{
        ;
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 15:{
        jj_consume_token(15);
ASTLTNode jjtn001 = new ASTLTNode(JJTLTNODE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtn001.jjtSetFirstToken(getToken(1));
        try {
          AdditiveExpression();
        } catch (Throwable jjte001) {
if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
            jjtn001.jjtSetLastToken(getToken(0));
          }
        }
        break;
        }
      case 16:{
        jj_consume_token(16);
ASTGTNode jjtn002 = new ASTGTNode(JJTGTNODE);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
          jjtn002.jjtSetFirstToken(getToken(1));
        try {
          AdditiveExpression();
        } catch (Throwable jjte002) {
if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte002;}
          }
          if (jjte002 instanceof ParseException) {
            {if (true) throw (ParseException)jjte002;}
          }
          {if (true) throw (Error)jjte002;}
        } finally {
if (jjtc002) {
            jjtree.closeNodeScope(jjtn002,  2);
            jjtn002.jjtSetLastToken(getToken(0));
          }
        }
        break;
        }
      case 17:{
        jj_consume_token(17);
ASTLENode jjtn003 = new ASTLENode(JJTLENODE);
           boolean jjtc003 = true;
           jjtree.openNodeScope(jjtn003);
           jjtn003.jjtSetFirstToken(getToken(1));
        try {
          AdditiveExpression();
        } catch (Throwable jjte003) {
if (jjtc003) {
             jjtree.clearNodeScope(jjtn003);
             jjtc003 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte003 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte003;}
           }
           if (jjte003 instanceof ParseException) {
             {if (true) throw (ParseException)jjte003;}
           }
           {if (true) throw (Error)jjte003;}
        } finally {
if (jjtc003) {
             jjtree.closeNodeScope(jjtn003,  2);
             jjtn003.jjtSetLastToken(getToken(0));
           }
        }
        break;
        }
      case 18:{
        jj_consume_token(18);
ASTGENode jjtn004 = new ASTGENode(JJTGENODE);
           boolean jjtc004 = true;
           jjtree.openNodeScope(jjtn004);
           jjtn004.jjtSetFirstToken(getToken(1));
        try {
          AdditiveExpression();
        } catch (Throwable jjte004) {
if (jjtc004) {
             jjtree.clearNodeScope(jjtn004);
             jjtc004 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte004 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte004;}
           }
           if (jjte004 instanceof ParseException) {
             {if (true) throw (ParseException)jjte004;}
           }
           {if (true) throw (Error)jjte004;}
        } finally {
if (jjtc004) {
             jjtree.closeNodeScope(jjtn004,  2);
             jjtn004.jjtSetLastToken(getToken(0));
           }
        }
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void AdditiveExpression() throws ParseException {
    MultiplicativeExpression();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 19:
      case 20:{
        ;
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 19:{
        jj_consume_token(19);
ASTAddNode jjtn001 = new ASTAddNode(JJTADDNODE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtn001.jjtSetFirstToken(getToken(1));
        try {
          MultiplicativeExpression();
        } catch (Throwable jjte001) {
if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
            jjtn001.jjtSetLastToken(getToken(0));
          }
        }
        break;
        }
      case 20:{
        jj_consume_token(20);
ASTSubtractNode jjtn002 = new ASTSubtractNode(JJTSUBTRACTNODE);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
          jjtn002.jjtSetFirstToken(getToken(1));
        try {
          MultiplicativeExpression();
        } catch (Throwable jjte002) {
if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte002;}
          }
          if (jjte002 instanceof ParseException) {
            {if (true) throw (ParseException)jjte002;}
          }
          {if (true) throw (Error)jjte002;}
        } finally {
if (jjtc002) {
            jjtree.closeNodeScope(jjtn002,  2);
            jjtn002.jjtSetLastToken(getToken(0));
          }
        }
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void MultiplicativeExpression() throws ParseException {
    UnaryExpression();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:{
        ;
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 21:{
        jj_consume_token(21);
ASTMulNode jjtn001 = new ASTMulNode(JJTMULNODE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtn001.jjtSetFirstToken(getToken(1));
        try {
          UnaryExpression();
        } catch (Throwable jjte001) {
if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
            jjtn001.jjtSetLastToken(getToken(0));
          }
        }
        break;
        }
      case 22:{
        jj_consume_token(22);
ASTDivNode jjtn002 = new ASTDivNode(JJTDIVNODE);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
          jjtn002.jjtSetFirstToken(getToken(1));
        try {
          UnaryExpression();
        } catch (Throwable jjte002) {
if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte002;}
          }
          if (jjte002 instanceof ParseException) {
            {if (true) throw (ParseException)jjte002;}
          }
          {if (true) throw (Error)jjte002;}
        } finally {
if (jjtc002) {
            jjtree.closeNodeScope(jjtn002,  2);
            jjtn002.jjtSetLastToken(getToken(0));
          }
        }
        break;
        }
      case 23:{
        jj_consume_token(23);
ASTModNode jjtn003 = new ASTModNode(JJTMODNODE);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
          jjtn003.jjtSetFirstToken(getToken(1));
        try {
          UnaryExpression();
        } catch (Throwable jjte003) {
if (jjtc003) {
            jjtree.clearNodeScope(jjtn003);
            jjtc003 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte003 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte003;}
          }
          if (jjte003 instanceof ParseException) {
            {if (true) throw (ParseException)jjte003;}
          }
          {if (true) throw (Error)jjte003;}
        } finally {
if (jjtc003) {
            jjtree.closeNodeScope(jjtn003,  2);
            jjtn003.jjtSetLastToken(getToken(0));
          }
        }
        break;
        }
      case 24:{
        jj_consume_token(24);
ASTLShiftNode jjtn004 = new ASTLShiftNode(JJTLSHIFTNODE);
           boolean jjtc004 = true;
           jjtree.openNodeScope(jjtn004);
           jjtn004.jjtSetFirstToken(getToken(1));
        try {
          UnaryExpression();
        } catch (Throwable jjte004) {
if (jjtc004) {
             jjtree.clearNodeScope(jjtn004);
             jjtc004 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte004 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte004;}
           }
           if (jjte004 instanceof ParseException) {
             {if (true) throw (ParseException)jjte004;}
           }
           {if (true) throw (Error)jjte004;}
        } finally {
if (jjtc004) {
             jjtree.closeNodeScope(jjtn004,  2);
             jjtn004.jjtSetLastToken(getToken(0));
           }
        }
        break;
        }
      case 25:{
        jj_consume_token(25);
ASTRShiftNode jjtn005 = new ASTRShiftNode(JJTRSHIFTNODE);
           boolean jjtc005 = true;
           jjtree.openNodeScope(jjtn005);
           jjtn005.jjtSetFirstToken(getToken(1));
        try {
          UnaryExpression();
        } catch (Throwable jjte005) {
if (jjtc005) {
             jjtree.clearNodeScope(jjtn005);
             jjtc005 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte005 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte005;}
           }
           if (jjte005 instanceof ParseException) {
             {if (true) throw (ParseException)jjte005;}
           }
           {if (true) throw (Error)jjte005;}
        } finally {
if (jjtc005) {
             jjtree.closeNodeScope(jjtn005,  2);
             jjtn005.jjtSetLastToken(getToken(0));
           }
        }
        break;
        }
      case 26:{
        jj_consume_token(26);
ASTRRotNode jjtn006 = new ASTRRotNode(JJTRROTNODE);
            boolean jjtc006 = true;
            jjtree.openNodeScope(jjtn006);
            jjtn006.jjtSetFirstToken(getToken(1));
        try {
          UnaryExpression();
        } catch (Throwable jjte006) {
if (jjtc006) {
              jjtree.clearNodeScope(jjtn006);
              jjtc006 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte006 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte006;}
            }
            if (jjte006 instanceof ParseException) {
              {if (true) throw (ParseException)jjte006;}
            }
            {if (true) throw (Error)jjte006;}
        } finally {
if (jjtc006) {
              jjtree.closeNodeScope(jjtn006,  2);
              jjtn006.jjtSetLastToken(getToken(0));
            }
        }
        break;
        }
      case 27:{
        jj_consume_token(27);
ASTLRotNode jjtn007 = new ASTLRotNode(JJTLROTNODE);
            boolean jjtc007 = true;
            jjtree.openNodeScope(jjtn007);
            jjtn007.jjtSetFirstToken(getToken(1));
        try {
          UnaryExpression();
        } catch (Throwable jjte007) {
if (jjtc007) {
              jjtree.clearNodeScope(jjtn007);
              jjtc007 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte007 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte007;}
            }
            if (jjte007 instanceof ParseException) {
              {if (true) throw (ParseException)jjte007;}
            }
            {if (true) throw (Error)jjte007;}
        } finally {
if (jjtc007) {
              jjtree.closeNodeScope(jjtn007,  2);
              jjtn007.jjtSetLastToken(getToken(0));
            }
        }
        break;
        }
      case 28:{
        jj_consume_token(28);
ASTBitwiseXorNode jjtn008 = new ASTBitwiseXorNode(JJTBITWISEXORNODE);
            boolean jjtc008 = true;
            jjtree.openNodeScope(jjtn008);
            jjtn008.jjtSetFirstToken(getToken(1));
        try {
          UnaryExpression();
        } catch (Throwable jjte008) {
if (jjtc008) {
              jjtree.clearNodeScope(jjtn008);
              jjtc008 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte008 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte008;}
            }
            if (jjte008 instanceof ParseException) {
              {if (true) throw (ParseException)jjte008;}
            }
            {if (true) throw (Error)jjte008;}
        } finally {
if (jjtc008) {
              jjtree.closeNodeScope(jjtn008,  2);
              jjtn008.jjtSetLastToken(getToken(0));
            }
        }
        break;
        }
      case 29:{
        jj_consume_token(29);
ASTBitwiseAndNode jjtn009 = new ASTBitwiseAndNode(JJTBITWISEANDNODE);
            boolean jjtc009 = true;
            jjtree.openNodeScope(jjtn009);
            jjtn009.jjtSetFirstToken(getToken(1));
        try {
          UnaryExpression();
        } catch (Throwable jjte009) {
if (jjtc009) {
              jjtree.clearNodeScope(jjtn009);
              jjtc009 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte009 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte009;}
            }
            if (jjte009 instanceof ParseException) {
              {if (true) throw (ParseException)jjte009;}
            }
            {if (true) throw (Error)jjte009;}
        } finally {
if (jjtc009) {
              jjtree.closeNodeScope(jjtn009,  2);
              jjtn009.jjtSetLastToken(getToken(0));
            }
        }
        break;
        }
      case 30:{
        jj_consume_token(30);
ASTBitwiseOrNode jjtn010 = new ASTBitwiseOrNode(JJTBITWISEORNODE);
           boolean jjtc010 = true;
           jjtree.openNodeScope(jjtn010);
           jjtn010.jjtSetFirstToken(getToken(1));
        try {
          UnaryExpression();
        } catch (Throwable jjte010) {
if (jjtc010) {
             jjtree.clearNodeScope(jjtn010);
             jjtc010 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte010 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte010;}
           }
           if (jjte010 instanceof ParseException) {
             {if (true) throw (ParseException)jjte010;}
           }
           {if (true) throw (Error)jjte010;}
        } finally {
if (jjtc010) {
             jjtree.closeNodeScope(jjtn010,  2);
             jjtn010.jjtSetLastToken(getToken(0));
           }
        }
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void UnaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 31:{
      jj_consume_token(31);
ASTBitwiseComplNode jjtn001 = new ASTBitwiseComplNode(JJTBITWISECOMPLNODE);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        jjtn001.jjtSetFirstToken(getToken(1));
      try {
        UnaryExpression();
      } catch (Throwable jjte001) {
if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte001;}
        }
        if (jjte001 instanceof ParseException) {
          {if (true) throw (ParseException)jjte001;}
        }
        {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  1);
          jjtn001.jjtSetLastToken(getToken(0));
        }
      }
      break;
      }
    case 32:{
      jj_consume_token(32);
ASTNotNode jjtn002 = new ASTNotNode(JJTNOTNODE);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
        jjtn002.jjtSetFirstToken(getToken(1));
      try {
        UnaryExpression();
      } catch (Throwable jjte002) {
if (jjtc002) {
          jjtree.clearNodeScope(jjtn002);
          jjtc002 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte002 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte002;}
        }
        if (jjte002 instanceof ParseException) {
          {if (true) throw (ParseException)jjte002;}
        }
        {if (true) throw (Error)jjte002;}
      } finally {
if (jjtc002) {
          jjtree.closeNodeScope(jjtn002,  1);
          jjtn002.jjtSetLastToken(getToken(0));
        }
      }
      break;
      }
    case 20:{
      jj_consume_token(20);
ASTNegationNode jjtn003 = new ASTNegationNode(JJTNEGATIONNODE);
        boolean jjtc003 = true;
        jjtree.openNodeScope(jjtn003);
        jjtn003.jjtSetFirstToken(getToken(1));
      try {
        UnaryExpression();
      } catch (Throwable jjte003) {
if (jjtc003) {
          jjtree.clearNodeScope(jjtn003);
          jjtc003 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte003 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte003;}
        }
        if (jjte003 instanceof ParseException) {
          {if (true) throw (ParseException)jjte003;}
        }
        {if (true) throw (Error)jjte003;}
      } finally {
if (jjtc003) {
          jjtree.closeNodeScope(jjtn003,  1);
          jjtn003.jjtSetLastToken(getToken(0));
        }
      }
      break;
      }
    case INTEGER_LITERAL:
    case 33:
    case 35:{
      PrimaryExpression();
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void PrimaryExpression() throws ParseException {String name;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER_LITERAL:{
      Literal();
      break;
      }
    case 35:{
      Id();
      break;
      }
    case 33:{
      jj_consume_token(33);
      Expression();
      jj_consume_token(34);
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Id() throws ParseException {/*@bgen(jjtree) Id */
  ASTId jjtn000 = new ASTId(JJTID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(35);
      AdditiveExpression();
      jj_consume_token(36);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void Literal() throws ParseException {Token t;
ASTIntConstNode jjtn001 = new ASTIntConstNode(JJTINTCONSTNODE);
   boolean jjtc001 = true;
   jjtree.openNodeScope(jjtn001);
   jjtn001.jjtSetFirstToken(getToken(1));
    try {
      t = jj_consume_token(INTEGER_LITERAL);
jjtree.closeNodeScope(jjtn001, true);
      jjtc001 = false;
      jjtn001.jjtSetLastToken(getToken(0));
jjtn001.val = SafeInteger.parseInt(t.image);
    } finally {
if (jjtc001) {
     jjtree.closeNodeScope(jjtn001, true);
     jjtn001.jjtSetLastToken(getToken(0));
   }
    }
  }

  final public void BooleanLiteral() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 37:{
ASTTrueNode jjtn001 = new ASTTrueNode(JJTTRUENODE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(37);
      } finally {
if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      jjtn001.jjtSetLastToken(getToken(0));
    }
      }
      break;
      }
    case 38:{
ASTFalseNode jjtn002 = new ASTFalseNode(JJTFALSENODE);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
    jjtn002.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(38);
      } finally {
if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
      jjtn002.jjtSetLastToken(getToken(0));
    }
      }
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 39:{
      jj_consume_token(39);
      break;
      }
    case 40:{
      Block();
      break;
      }
    case 35:{
      StatementExpression();
      break;
      }
    case 42:{
      IfStatement();
      break;
      }
    case 44:{
      RepeatStatement();
      break;
      }
    case 45:{
      SHA256();
      break;
      }
    case 48:{
      MD5();
      break;
      }
    case 105:{
      RIPEMD160();
      break;
      }
    case 106:{
      RIPEMD128();
      break;
      }
    case 46:{
      SHA512();
      break;
      }
    case 104:{
      Tiger();
      break;
      }
    case 47:{
      Whirlpool();
      break;
      }
    case 49:{
      SECP192K1PrivToPub();
      break;
      }
    case 50:{
      SECP192K1PointAdd();
      break;
      }
    case 51:{
      SECP192K1PointSub();
      break;
      }
    case 52:{
      SECP192K1PointScalarMult();
      break;
      }
    case 53:{
      SECP192K1PointNegate();
      break;
      }
    case 54:{
      SECP192R1PrivToPub();
      break;
      }
    case 55:{
      SECP192R1PointAdd();
      break;
      }
    case 56:{
      SECP192R1PointSub();
      break;
      }
    case 57:{
      SECP192R1PointScalarMult();
      break;
      }
    case 58:{
      SECP192R1PointNegate();
      break;
      }
    case 59:{
      SECP224K1PrivToPub();
      break;
      }
    case 60:{
      SECP224K1PointAdd();
      break;
      }
    case 61:{
      SECP224K1PointSub();
      break;
      }
    case 62:{
      SECP224K1PointScalarMult();
      break;
      }
    case 63:{
      SECP224K1PointNegate();
      break;
      }
    case 64:{
      SECP224R1PrivToPub();
      break;
      }
    case 65:{
      SECP224R1PointAdd();
      break;
      }
    case 66:{
      SECP224R1PointSub();
      break;
      }
    case 67:{
      SECP224R1PointScalarMult();
      break;
      }
    case 68:{
      SECP224R1PointNegate();
      break;
      }
    case 69:{
      SECP256K1PrivToPub();
      break;
      }
    case 70:{
      SECP256K1PointAdd();
      break;
      }
    case 71:{
      SECP256K1PointSub();
      break;
      }
    case 72:{
      SECP256K1PointScalarMult();
      break;
      }
    case 73:{
      SECP256K1PointNegate();
      break;
      }
    case 74:{
      SECP256R1PrivToPub();
      break;
      }
    case 75:{
      SECP256R1PointAdd();
      break;
      }
    case 76:{
      SECP256R1PointSub();
      break;
      }
    case 77:{
      SECP256R1PointScalarMult();
      break;
      }
    case 78:{
      SECP256R1PointNegate();
      break;
      }
    case 79:{
      SECP384R1PrivToPub();
      break;
      }
    case 80:{
      SECP384R1PointAdd();
      break;
      }
    case 81:{
      SECP384R1PointSub();
      break;
      }
    case 82:{
      SECP384R1PointScalarMult();
      break;
      }
    case 83:{
      SECP384R1PointNegate();
      break;
      }
    case 84:{
      PRIME192V1PrivToPub();
      break;
      }
    case 85:{
      PRIME192V1PointAdd();
      break;
      }
    case 86:{
      PRIME192V1PointSub();
      break;
      }
    case 87:{
      PRIME192V1PointScalarMult();
      break;
      }
    case 88:{
      PRIME192V1PointNegate();
      break;
      }
    case 89:{
      PRIME192V2PrivToPub();
      break;
      }
    case 90:{
      PRIME192V2PointAdd();
      break;
      }
    case 91:{
      PRIME192V2PointSub();
      break;
      }
    case 92:{
      PRIME192V2PointScalarMult();
      break;
      }
    case 93:{
      PRIME192V2PointNegate();
      break;
      }
    case 94:{
      PRIME192V3PrivToPub();
      break;
      }
    case 95:{
      PRIME192V3PointAdd();
      break;
      }
    case 96:{
      PRIME192V3PointSub();
      break;
      }
    case 97:{
      PRIME192V3PointScalarMult();
      break;
      }
    case 98:{
      PRIME192V3PointNegate();
      break;
      }
    case 99:{
      PRIME256V1PrivToPub();
      break;
      }
    case 100:{
      PRIME256V1PointAdd();
      break;
      }
    case 101:{
      PRIME256V1PointSub();
      break;
      }
    case 102:{
      PRIME256V1PointScalarMult();
      break;
      }
    case 103:{
      PRIME256V1PointNegate();
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Block() throws ParseException {/*@bgen(jjtree) Block */
  ASTBlock jjtn000 = new ASTBlock(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(40);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 35:
        case 39:
        case 40:
        case 42:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:{
          ;
          break;
          }
        default:
          jj_la1[18] = jj_gen;
          break label_11;
        }
        Statement();
      }
      jj_consume_token(41);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void StatementExpression() throws ParseException {/*@bgen(jjtree) StatementExpression */
  ASTStatementExpression jjtn000 = new ASTStatementExpression(JJTSTATEMENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Assignment();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void IfStatement() throws ParseException {/*@bgen(jjtree) IfStatement */
  ASTIfStatement jjtn000 = new ASTIfStatement(JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(42);
      jj_consume_token(33);
      Expression();
      jj_consume_token(34);
      Block();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 43:{
        jj_consume_token(43);
        Block();
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void RepeatStatement() throws ParseException {/*@bgen(jjtree) #RepeatStatement( 2) */
  ASTRepeatStatement jjtn000 = new ASTRepeatStatement(JJTREPEATSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(44);
      jj_consume_token(33);
      Literal();
      jj_consume_token(34);
      Block();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  2);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void SHA256() throws ParseException {/*@bgen(jjtree) #SHA256( 2) */
  ASTSHA256 jjtn000 = new ASTSHA256(JJTSHA256);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(45);
      Literal();
      Literal();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  2);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void SHA512() throws ParseException {/*@bgen(jjtree) #SHA512( 2) */
  ASTSHA512 jjtn000 = new ASTSHA512(JJTSHA512);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(46);
      Literal();
      Literal();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  2);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void Whirlpool() throws ParseException {/*@bgen(jjtree) #Whirlpool( 2) */
  ASTWhirlpool jjtn000 = new ASTWhirlpool(JJTWHIRLPOOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(47);
      Literal();
      Literal();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  2);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void MD5() throws ParseException {/*@bgen(jjtree) #MD5( 2) */
  ASTMD5 jjtn000 = new ASTMD5(JJTMD5);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(48);
      Literal();
      Literal();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  2);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void SECP192K1PrivToPub() throws ParseException {/*@bgen(jjtree) #SECP192K1PrivToPub( 2) */
  ASTSECP192K1PrivToPub jjtn000 = new ASTSECP192K1PrivToPub(JJTSECP192K1PRIVTOPUB);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(49);
      Literal();
      BooleanLiteral();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  2);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void SECP192K1PointAdd() throws ParseException {/*@bgen(jjtree) #SECP192K1PointAdd( 5) */
  ASTSECP192K1PointAdd jjtn000 = new ASTSECP192K1PointAdd(JJTSECP192K1POINTADD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(50);
      Literal();
      BooleanLiteral();
      Literal();
      BooleanLiteral();
      BooleanLiteral();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  5);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void SECP192K1PointSub() throws ParseException {/*@bgen(jjtree) #SECP192K1PointSub( 5) */
  ASTSECP192K1PointSub jjtn000 = new ASTSECP192K1PointSub(JJTSECP192K1POINTSUB);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(51);
      Literal();
      BooleanLiteral();
      Literal();
      BooleanLiteral();
      BooleanLiteral();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  5);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void SECP192K1PointScalarMult() throws ParseException {/*@bgen(jjtree) #SECP192K1PointScalarMult( 5) */
  ASTSECP192K1PointScalarMult jjtn000 = new ASTSECP192K1PointScalarMult(JJTSECP192K1POINTSCALARMULT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(52);
      Literal();
      BooleanLiteral();
      Literal();
      Literal();
      BooleanLiteral();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  5);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void SECP192K1PointNegate() throws ParseException {/*@bgen(jjtree) #SECP192K1PointNegate( 3) */
  ASTSECP192K1PointNegate jjtn000 = new ASTSECP192K1PointNegate(JJTSECP192K1POINTNEGATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(53);
      Literal();
      BooleanLiteral();
      BooleanLiteral();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  3);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void SECP192R1PrivToPub() throws ParseException {/*@bgen(jjtree) #SECP192R1PrivToPub( 2) */
  ASTSECP192R1PrivToPub jjtn000 = new ASTSECP192R1PrivToPub(JJTSECP192R1PRIVTOPUB);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(54);
      Literal();
      BooleanLiteral();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  2);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void SECP192R1PointAdd() throws ParseException {/*@bgen(jjtree) #SECP192R1PointAdd( 5) */
  ASTSECP192R1PointAdd jjtn000 = new ASTSECP192R1PointAdd(JJTSECP192R1POINTADD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(55);
      Literal();
      BooleanLiteral();
      Literal();
      BooleanLiteral();
      BooleanLiteral();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  5);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void SECP192R1PointSub() throws ParseException {/*@bgen(jjtree) #SECP192R1PointSub( 5) */
  ASTSECP192R1PointSub jjtn000 = new ASTSECP192R1PointSub(JJTSECP192R1POINTSUB);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(56);
      Literal();
      BooleanLiteral();
      Literal();
      BooleanLiteral();
      BooleanLiteral();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  5);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void SECP192R1PointScalarMult() throws ParseException {/*@bgen(jjtree) #SECP192R1PointScalarMult( 5) */
  ASTSECP192R1PointScalarMult jjtn000 = new ASTSECP192R1PointScalarMult(JJTSECP192R1POINTSCALARMULT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(57);
      Literal();
      BooleanLiteral();
      Literal();
      Literal();
      BooleanLiteral();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  5);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void SECP192R1PointNegate() throws ParseException {/*@bgen(jjtree) #SECP192R1PointNegate( 3) */
  ASTSECP192R1PointNegate jjtn000 = new ASTSECP192R1PointNegate(JJTSECP192R1POINTNEGATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(58);
      Literal();
      BooleanLiteral();
      BooleanLiteral();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  3);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void SECP224K1PrivToPub() throws ParseException {/*@bgen(jjtree) #SECP224K1PrivToPub( 2) */
  ASTSECP224K1PrivToPub jjtn000 = new ASTSECP224K1PrivToPub(JJTSECP224K1PRIVTOPUB);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(59);
      Literal();
      BooleanLiteral();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  2);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void SECP224K1PointAdd() throws ParseException {/*@bgen(jjtree) #SECP224K1PointAdd( 5) */
  ASTSECP224K1PointAdd jjtn000 = new ASTSECP224K1PointAdd(JJTSECP224K1POINTADD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(60);
      Literal();
      BooleanLiteral();
      Literal();
      BooleanLiteral();
      BooleanLiteral();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  5);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void SECP224K1PointSub() throws ParseException {/*@bgen(jjtree) #SECP224K1PointSub( 5) */
  ASTSECP224K1PointSub jjtn000 = new ASTSECP224K1PointSub(JJTSECP224K1POINTSUB);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(61);
      Literal();
      BooleanLiteral();
      Literal();
      BooleanLiteral();
      BooleanLiteral();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  5);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void SECP224K1PointScalarMult() throws ParseException {/*@bgen(jjtree) #SECP224K1PointScalarMult( 5) */
  ASTSECP224K1PointScalarMult jjtn000 = new ASTSECP224K1PointScalarMult(JJTSECP224K1POINTSCALARMULT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(62);
      Literal();
      BooleanLiteral();
      Literal();
      Literal();
      BooleanLiteral();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  5);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void SECP224K1PointNegate() throws ParseException {/*@bgen(jjtree) #SECP224K1PointNegate( 3) */
  ASTSECP224K1PointNegate jjtn000 = new ASTSECP224K1PointNegate(JJTSECP224K1POINTNEGATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(63);
      Literal();
      BooleanLiteral();
      BooleanLiteral();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  3);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void SECP224R1PrivToPub() throws ParseException {/*@bgen(jjtree) #SECP224R1PrivToPub( 2) */
  ASTSECP224R1PrivToPub jjtn000 = new ASTSECP224R1PrivToPub(JJTSECP224R1PRIVTOPUB);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(64);
      Literal();
      BooleanLiteral();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  2);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void SECP224R1PointAdd() throws ParseException {/*@bgen(jjtree) #SECP224R1PointAdd( 5) */
  ASTSECP224R1PointAdd jjtn000 = new ASTSECP224R1PointAdd(JJTSECP224R1POINTADD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(65);
      Literal();
      BooleanLiteral();
      Literal();
      BooleanLiteral();
      BooleanLiteral();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  5);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void SECP224R1PointSub() throws ParseException {/*@bgen(jjtree) #SECP224R1PointSub( 5) */
  ASTSECP224R1PointSub jjtn000 = new ASTSECP224R1PointSub(JJTSECP224R1POINTSUB);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(66);
      Literal();
      BooleanLiteral();
      Literal();
      BooleanLiteral();
      BooleanLiteral();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  5);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void SECP224R1PointScalarMult() throws ParseException {/*@bgen(jjtree) #SECP224R1PointScalarMult( 5) */
  ASTSECP224R1PointScalarMult jjtn000 = new ASTSECP224R1PointScalarMult(JJTSECP224R1POINTSCALARMULT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(67);
      Literal();
      BooleanLiteral();
      Literal();
      Literal();
      BooleanLiteral();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  5);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void SECP224R1PointNegate() throws ParseException {/*@bgen(jjtree) #SECP224R1PointNegate( 3) */
  ASTSECP224R1PointNegate jjtn000 = new ASTSECP224R1PointNegate(JJTSECP224R1POINTNEGATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(68);
      Literal();
      BooleanLiteral();
      BooleanLiteral();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  3);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void SECP256K1PrivToPub() throws ParseException {/*@bgen(jjtree) #SECP256K1PrivToPub( 2) */
  ASTSECP256K1PrivToPub jjtn000 = new ASTSECP256K1PrivToPub(JJTSECP256K1PRIVTOPUB);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(69);
      Literal();
      BooleanLiteral();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  2);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void SECP256K1PointAdd() throws ParseException {/*@bgen(jjtree) #SECP256K1PointAdd( 5) */
  ASTSECP256K1PointAdd jjtn000 = new ASTSECP256K1PointAdd(JJTSECP256K1POINTADD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(70);
      Literal();
      BooleanLiteral();
      Literal();
      BooleanLiteral();
      BooleanLiteral();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  5);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void SECP256K1PointSub() throws ParseException {/*@bgen(jjtree) #SECP256K1PointSub( 5) */
  ASTSECP256K1PointSub jjtn000 = new ASTSECP256K1PointSub(JJTSECP256K1POINTSUB);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(71);
      Literal();
      BooleanLiteral();
      Literal();
      BooleanLiteral();
      BooleanLiteral();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  5);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void SECP256K1PointScalarMult() throws ParseException {/*@bgen(jjtree) #SECP256K1PointScalarMult( 5) */
  ASTSECP256K1PointScalarMult jjtn000 = new ASTSECP256K1PointScalarMult(JJTSECP256K1POINTSCALARMULT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(72);
      Literal();
      BooleanLiteral();
      Literal();
      Literal();
      BooleanLiteral();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  5);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void SECP256K1PointNegate() throws ParseException {/*@bgen(jjtree) #SECP256K1PointNegate( 3) */
  ASTSECP256K1PointNegate jjtn000 = new ASTSECP256K1PointNegate(JJTSECP256K1POINTNEGATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(73);
      Literal();
      BooleanLiteral();
      BooleanLiteral();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  3);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void SECP256R1PrivToPub() throws ParseException {/*@bgen(jjtree) #SECP256R1PrivToPub( 2) */
  ASTSECP256R1PrivToPub jjtn000 = new ASTSECP256R1PrivToPub(JJTSECP256R1PRIVTOPUB);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(74);
      Literal();
      BooleanLiteral();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  2);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void SECP256R1PointAdd() throws ParseException {/*@bgen(jjtree) #SECP256R1PointAdd( 5) */
  ASTSECP256R1PointAdd jjtn000 = new ASTSECP256R1PointAdd(JJTSECP256R1POINTADD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(75);
      Literal();
      BooleanLiteral();
      Literal();
      BooleanLiteral();
      BooleanLiteral();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  5);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void SECP256R1PointSub() throws ParseException {/*@bgen(jjtree) #SECP256R1PointSub( 5) */
  ASTSECP256R1PointSub jjtn000 = new ASTSECP256R1PointSub(JJTSECP256R1POINTSUB);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(76);
      Literal();
      BooleanLiteral();
      Literal();
      BooleanLiteral();
      BooleanLiteral();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  5);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void SECP256R1PointScalarMult() throws ParseException {/*@bgen(jjtree) #SECP256R1PointScalarMult( 5) */
  ASTSECP256R1PointScalarMult jjtn000 = new ASTSECP256R1PointScalarMult(JJTSECP256R1POINTSCALARMULT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(77);
      Literal();
      BooleanLiteral();
      Literal();
      Literal();
      BooleanLiteral();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  5);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void SECP256R1PointNegate() throws ParseException {/*@bgen(jjtree) #SECP256R1PointNegate( 3) */
  ASTSECP256R1PointNegate jjtn000 = new ASTSECP256R1PointNegate(JJTSECP256R1POINTNEGATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(78);
      Literal();
      BooleanLiteral();
      BooleanLiteral();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  3);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void SECP384R1PrivToPub() throws ParseException {/*@bgen(jjtree) #SECP384R1PrivToPub( 2) */
  ASTSECP384R1PrivToPub jjtn000 = new ASTSECP384R1PrivToPub(JJTSECP384R1PRIVTOPUB);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(79);
      Literal();
      BooleanLiteral();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  2);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void SECP384R1PointAdd() throws ParseException {/*@bgen(jjtree) #SECP384R1PointAdd( 5) */
  ASTSECP384R1PointAdd jjtn000 = new ASTSECP384R1PointAdd(JJTSECP384R1POINTADD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(80);
      Literal();
      BooleanLiteral();
      Literal();
      BooleanLiteral();
      BooleanLiteral();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  5);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void SECP384R1PointSub() throws ParseException {/*@bgen(jjtree) #SECP384R1PointSub( 5) */
  ASTSECP384R1PointSub jjtn000 = new ASTSECP384R1PointSub(JJTSECP384R1POINTSUB);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(81);
      Literal();
      BooleanLiteral();
      Literal();
      BooleanLiteral();
      BooleanLiteral();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  5);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void SECP384R1PointScalarMult() throws ParseException {/*@bgen(jjtree) #SECP384R1PointScalarMult( 5) */
  ASTSECP384R1PointScalarMult jjtn000 = new ASTSECP384R1PointScalarMult(JJTSECP384R1POINTSCALARMULT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(82);
      Literal();
      BooleanLiteral();
      Literal();
      Literal();
      BooleanLiteral();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  5);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void SECP384R1PointNegate() throws ParseException {/*@bgen(jjtree) #SECP384R1PointNegate( 3) */
  ASTSECP384R1PointNegate jjtn000 = new ASTSECP384R1PointNegate(JJTSECP384R1POINTNEGATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(83);
      Literal();
      BooleanLiteral();
      BooleanLiteral();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  3);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void PRIME192V1PrivToPub() throws ParseException {/*@bgen(jjtree) #PRIME192V1PrivToPub( 2) */
  ASTPRIME192V1PrivToPub jjtn000 = new ASTPRIME192V1PrivToPub(JJTPRIME192V1PRIVTOPUB);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(84);
      Literal();
      BooleanLiteral();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  2);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void PRIME192V1PointAdd() throws ParseException {/*@bgen(jjtree) #PRIME192V1PointAdd( 5) */
  ASTPRIME192V1PointAdd jjtn000 = new ASTPRIME192V1PointAdd(JJTPRIME192V1POINTADD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(85);
      Literal();
      BooleanLiteral();
      Literal();
      BooleanLiteral();
      BooleanLiteral();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  5);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void PRIME192V1PointSub() throws ParseException {/*@bgen(jjtree) #PRIME192V1PointSub( 5) */
  ASTPRIME192V1PointSub jjtn000 = new ASTPRIME192V1PointSub(JJTPRIME192V1POINTSUB);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(86);
      Literal();
      BooleanLiteral();
      Literal();
      BooleanLiteral();
      BooleanLiteral();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  5);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void PRIME192V1PointScalarMult() throws ParseException {/*@bgen(jjtree) #PRIME192V1PointScalarMult( 5) */
  ASTPRIME192V1PointScalarMult jjtn000 = new ASTPRIME192V1PointScalarMult(JJTPRIME192V1POINTSCALARMULT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(87);
      Literal();
      BooleanLiteral();
      Literal();
      Literal();
      BooleanLiteral();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  5);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void PRIME192V1PointNegate() throws ParseException {/*@bgen(jjtree) #PRIME192V1PointNegate( 3) */
  ASTPRIME192V1PointNegate jjtn000 = new ASTPRIME192V1PointNegate(JJTPRIME192V1POINTNEGATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(88);
      Literal();
      BooleanLiteral();
      BooleanLiteral();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  3);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void PRIME192V2PrivToPub() throws ParseException {/*@bgen(jjtree) #PRIME192V2PrivToPub( 2) */
  ASTPRIME192V2PrivToPub jjtn000 = new ASTPRIME192V2PrivToPub(JJTPRIME192V2PRIVTOPUB);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(89);
      Literal();
      BooleanLiteral();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  2);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void PRIME192V2PointAdd() throws ParseException {/*@bgen(jjtree) #PRIME192V2PointAdd( 5) */
  ASTPRIME192V2PointAdd jjtn000 = new ASTPRIME192V2PointAdd(JJTPRIME192V2POINTADD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(90);
      Literal();
      BooleanLiteral();
      Literal();
      BooleanLiteral();
      BooleanLiteral();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  5);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void PRIME192V2PointSub() throws ParseException {/*@bgen(jjtree) #PRIME192V2PointSub( 5) */
  ASTPRIME192V2PointSub jjtn000 = new ASTPRIME192V2PointSub(JJTPRIME192V2POINTSUB);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(91);
      Literal();
      BooleanLiteral();
      Literal();
      BooleanLiteral();
      BooleanLiteral();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  5);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void PRIME192V2PointScalarMult() throws ParseException {/*@bgen(jjtree) #PRIME192V2PointScalarMult( 5) */
  ASTPRIME192V2PointScalarMult jjtn000 = new ASTPRIME192V2PointScalarMult(JJTPRIME192V2POINTSCALARMULT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(92);
      Literal();
      BooleanLiteral();
      Literal();
      Literal();
      BooleanLiteral();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  5);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void PRIME192V2PointNegate() throws ParseException {/*@bgen(jjtree) #PRIME192V2PointNegate( 3) */
  ASTPRIME192V2PointNegate jjtn000 = new ASTPRIME192V2PointNegate(JJTPRIME192V2POINTNEGATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(93);
      Literal();
      BooleanLiteral();
      BooleanLiteral();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  3);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void PRIME192V3PrivToPub() throws ParseException {/*@bgen(jjtree) #PRIME192V3PrivToPub( 2) */
  ASTPRIME192V3PrivToPub jjtn000 = new ASTPRIME192V3PrivToPub(JJTPRIME192V3PRIVTOPUB);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(94);
      Literal();
      BooleanLiteral();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  2);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void PRIME192V3PointAdd() throws ParseException {/*@bgen(jjtree) #PRIME192V3PointAdd( 5) */
  ASTPRIME192V3PointAdd jjtn000 = new ASTPRIME192V3PointAdd(JJTPRIME192V3POINTADD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(95);
      Literal();
      BooleanLiteral();
      Literal();
      BooleanLiteral();
      BooleanLiteral();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  5);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void PRIME192V3PointSub() throws ParseException {/*@bgen(jjtree) #PRIME192V3PointSub( 5) */
  ASTPRIME192V3PointSub jjtn000 = new ASTPRIME192V3PointSub(JJTPRIME192V3POINTSUB);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(96);
      Literal();
      BooleanLiteral();
      Literal();
      BooleanLiteral();
      BooleanLiteral();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  5);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void PRIME192V3PointScalarMult() throws ParseException {/*@bgen(jjtree) #PRIME192V3PointScalarMult( 5) */
  ASTPRIME192V3PointScalarMult jjtn000 = new ASTPRIME192V3PointScalarMult(JJTPRIME192V3POINTSCALARMULT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(97);
      Literal();
      BooleanLiteral();
      Literal();
      Literal();
      BooleanLiteral();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  5);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void PRIME192V3PointNegate() throws ParseException {/*@bgen(jjtree) #PRIME192V3PointNegate( 3) */
  ASTPRIME192V3PointNegate jjtn000 = new ASTPRIME192V3PointNegate(JJTPRIME192V3POINTNEGATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(98);
      Literal();
      BooleanLiteral();
      BooleanLiteral();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  3);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void PRIME256V1PrivToPub() throws ParseException {/*@bgen(jjtree) #PRIME256V1PrivToPub( 2) */
  ASTPRIME256V1PrivToPub jjtn000 = new ASTPRIME256V1PrivToPub(JJTPRIME256V1PRIVTOPUB);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(99);
      Literal();
      BooleanLiteral();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  2);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void PRIME256V1PointAdd() throws ParseException {/*@bgen(jjtree) #PRIME256V1PointAdd( 5) */
  ASTPRIME256V1PointAdd jjtn000 = new ASTPRIME256V1PointAdd(JJTPRIME256V1POINTADD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(100);
      Literal();
      BooleanLiteral();
      Literal();
      BooleanLiteral();
      BooleanLiteral();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  5);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void PRIME256V1PointSub() throws ParseException {/*@bgen(jjtree) #PRIME256V1PointSub( 5) */
  ASTPRIME256V1PointSub jjtn000 = new ASTPRIME256V1PointSub(JJTPRIME256V1POINTSUB);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(101);
      Literal();
      BooleanLiteral();
      Literal();
      BooleanLiteral();
      BooleanLiteral();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  5);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void PRIME256V1PointScalarMult() throws ParseException {/*@bgen(jjtree) #PRIME256V1PointScalarMult( 5) */
  ASTPRIME256V1PointScalarMult jjtn000 = new ASTPRIME256V1PointScalarMult(JJTPRIME256V1POINTSCALARMULT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(102);
      Literal();
      BooleanLiteral();
      Literal();
      Literal();
      BooleanLiteral();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  5);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void PRIME256V1PointNegate() throws ParseException {/*@bgen(jjtree) #PRIME256V1PointNegate( 3) */
  ASTPRIME256V1PointNegate jjtn000 = new ASTPRIME256V1PointNegate(JJTPRIME256V1POINTNEGATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(103);
      Literal();
      BooleanLiteral();
      BooleanLiteral();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  3);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void Tiger() throws ParseException {/*@bgen(jjtree) #Tiger( 2) */
  ASTTiger jjtn000 = new ASTTiger(JJTTIGER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(104);
      Literal();
      Literal();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  2);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void RIPEMD160() throws ParseException {/*@bgen(jjtree) #RIPEMD160( 2) */
  ASTRIPEMD160 jjtn000 = new ASTRIPEMD160(JJTRIPEMD160);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(105);
      Literal();
      Literal();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  2);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void RIPEMD128() throws ParseException {/*@bgen(jjtree) #RIPEMD128( 2) */
  ASTRIPEMD128 jjtn000 = new ASTRIPEMD128(JJTRIPEMD128);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(106);
      Literal();
      Literal();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  2);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void VerifyStatement() throws ParseException {/*@bgen(jjtree) VerifyStatement */
  ASTVerifyStatement jjtn000 = new ASTVerifyStatement(JJTVERIFYSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(107);
      ConditionalOrExpression();
      jj_consume_token(39);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  /** Generated Token Manager. */
  public ElasticPLParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[20];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x100,0x200,0x400,0x800,0x1000,0x6000,0x6000,0x78000,0x78000,0x180000,0x180000,0x7fe00000,0x7fe00000,0x80100040,0x40,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0xfffff588,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0xa,0x60,0xfffff588,0xfffff588,0x800,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0xffffffff,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x7ff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7ff,0x7ff,0x0,};
   }

  /** Constructor with InputStream. */
  public ElasticPLParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ElasticPLParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ElasticPLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ElasticPLParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ElasticPLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ElasticPLParser(ElasticPLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ElasticPLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[113];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 20; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 113; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
