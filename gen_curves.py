inr = """

void SECP256K1PrivToPub() #SECP256K1PrivToPub(2):
{}
{
  "SECP256K1PrivToPub" Literal() BooleanLiteral() ";"
}

void SECP256K1PointAdd() #SECP256K1PointAdd(5):
{}
{
  "SECP256K1PointAdd" Literal() BooleanLiteral() Literal() BooleanLiteral() BooleanLiteral() ";"
}

void SECP256K1PointSub() #SECP256K1PointSub(5):
{}
{
  "SECP256K1PointSub" Literal() BooleanLiteral() Literal() BooleanLiteral() BooleanLiteral() ";"
}
void SECP256K1PointScalarMult() #SECP256K1PointScalarMult(5):
{}
{
  "SECP256K1PointScalarMult" Literal() BooleanLiteral() Literal() Literal() BooleanLiteral() ";"
}

void SECP256K1PointNegate() #SECP256K1PointNegate(3):
{}
{
  "SECP256K1PointNegate" Literal() BooleanLiteral() BooleanLiteral() ";"
}

"""
add="""
/* Generated By:JJTree: Do not edit this line. ASTSECP256K1PointAdd.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=true,NODE_PREFIX=AST,NODE_EXTENDS=MyNode,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTSECP256K1PointAdd extends AbstractPointAdd {
  public ASTSECP256K1PointAdd(int id) {
    super(id);
  }

  public ASTSECP256K1PointAdd(ElasticPLParser p, int id) {
    super(p, id);
  }

  @Override
  public  String getCurve() { return "secp256k1"; }
  @Override
  public int getCompressedSize() {return 33; }
  @Override
  public int getUncompressedSize()  {return 65; }
  @Override
  public int getPrivkeyInputSize()  {return 32; }

}
/* JavaCC - OriginalChecksum=149c51669bb00582aa47fef7b7b566b1 (do not edit this line) */
"""
negate="""
/* Generated By:JJTree: Do not edit this line. ASTSECP256K1PointNegate.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=true,NODE_PREFIX=AST,NODE_EXTENDS=MyNode,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTSECP256K1PointNegate extends AbstractPointNegate {
  public ASTSECP256K1PointNegate(int id) {
    super(id);
  }

  public ASTSECP256K1PointNegate(ElasticPLParser p, int id) {
    super(p, id);
  }

  @Override
  public  String getCurve() { return "secp256k1"; }
  @Override
  public int getCompressedSize() {return 33; }
  @Override
  public int getUncompressedSize()  {return 65; }
  @Override
  public int getPrivkeyInputSize()  {return 32; }
}
/* JavaCC - OriginalChecksum=4773d6afb2dcfb52e711792dda875863 (do not edit this line) */
"""
scalar="""
/* Generated By:JJTree: Do not edit this line. ASTSECP256K1PointScalarMult.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=true,NODE_PREFIX=AST,NODE_EXTENDS=MyNode,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTSECP256K1PointScalarMult extends AbstractPointScalarMult {
  public ASTSECP256K1PointScalarMult(int id) {
    super(id);
  }

  public ASTSECP256K1PointScalarMult(ElasticPLParser p, int id) {
    super(p, id);
  }

  @Override
  public  String getCurve() { return "secp256k1"; }
  @Override
  public int getCompressedSize() {return 33; }
  @Override
  public int getUncompressedSize()  {return 65; }
  @Override
  public int getPrivkeyInputSize()  {return 32; }
}
/* JavaCC - OriginalChecksum=4b27c49383c76ca545598a0f80307d15 (do not edit this line) */

"""
sub="""
/* Generated By:JJTree: Do not edit this line. ASTSECP256K1PointSub.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=true,NODE_PREFIX=AST,NODE_EXTENDS=MyNode,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTSECP256K1PointSub extends AbstractPointSub {
  public ASTSECP256K1PointSub(int id) {
    super(id);
  }

  public ASTSECP256K1PointSub(ElasticPLParser p, int id) {
    super(p, id);
  }

  @Override
  public  String getCurve() { return "secp256k1"; }
  @Override
  public int getCompressedSize() {return 33; }
  @Override
  public int getUncompressedSize()  {return 65; }
  @Override
  public int getPrivkeyInputSize()  {return 32; }

}
/* JavaCC - OriginalChecksum=b1b7b2d1f380ae4ea1e90593f05c2551 (do not edit this line) */
"""
priv="""
/* Generated By:JJTree: Do not edit this line. ASTSECP256K1PrivToPub.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=true,NODE_PREFIX=AST,NODE_EXTENDS=MyNode,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTSECP256K1PrivToPub extends AbstractPrivToPub {
  public ASTSECP256K1PrivToPub(int id) {
    super(id);
  }

  public ASTSECP256K1PrivToPub(ElasticPLParser p, int id) {
    super(p, id);
  }

  @Override
  public  String getCurve() { return "secp256k1"; }
  @Override
  public int getCompressedSize() {return 33; }
  @Override
  public int getUncompressedSize()  {return 65; }
  @Override
  public int getPrivkeyInputSize()  {return 32; }

}
/* JavaCC - OriginalChecksum=b538b84394fa778d83874e548ead44b1 (do not edit this line) */
"""
def quickwrite(name,content,curvename,p,c,u):
    target = open(name, 'w+')
    content = content.replace("SECP256K1",curvename.upper())
    content = content.replace("\"secp256k1\"","\"" + curvename + "\"")
    content = content.replace("return 33","return " + str(c))
    content = content.replace("return 32","return " + str(p))
    content = content.replace("return 65","return " + str(u))
    target.write(content)
    target.close()

def getPart(curvename):
    pt = "|" + "\n"
    pt += "  " + curvename.upper() + "PrivToPub()" + "\n"
    pt += "|" + "\n"
    pt += "  " + curvename.upper() + "PointAdd()" + "\n"
    pt += "|" + "\n"
    pt += "  " + curvename.upper() + "PointSub()" + "\n"
    pt += "|" + "\n"
    pt += "  " + curvename.upper() + "PointScalarMult()" + "\n"
    pt += "|" + "\n"
    pt += "  " + curvename.upper() + "PointNegate()"
    return pt

curves = ("secp192k1","secp192r1","secp224k1","secp224r1","secp256k1","secp256r1","secp384r1","prime192v1","prime192v2","prime192v3","prime256v1")
cvals = (192,192,224,224,256,256,384,192,192,192,256)

for i in curves:
    print (getPart(i))

for i in curves:
    print (inr.replace("SECP256K1",i.upper()))

for i in range(len(curves)):
    curve = curves[i]
    cval=cvals[i]
    privsize = int(cval/8)
    comp = int(privsize+1)
    uncomp = int((privsize*2)+1)
    quickwrite("AST" + curve.upper() + "PointAdd.java",add,curve,privsize,comp,uncomp)
    quickwrite("AST" + curve.upper() + "PointSub.java",sub,curve,privsize,comp,uncomp)
    quickwrite("AST" + curve.upper() + "PointScalarMult.java",scalar,curve,privsize,comp,uncomp)
    quickwrite("AST" + curve.upper() + "PrivToPub.java",priv,curve,privsize,comp,uncomp)
    quickwrite("AST" + curve.upper() + "PointNegate.java",negate,curve,privsize,comp,uncomp)
