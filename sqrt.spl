input 3;
m[10]=5;
m[11]=10;
m[m[10]+m[11]+100]=m[10]+m[11];
m[9]=6+m[8];
if((3<1)^(3>2)){
	m[1001]=1000;
}
m[1000]=4 xor 7;
if(1^((3>1)+1)>2){
m[123]=~7;
}
if(~(1<2)){
	m[20]=2;
}
Whirlpool 0 0;
m[100]=m[11]+(m[11]>0);
repeat(6){
	m[9]=9;
}
if(3 != (3<0)){
	m[999]=9;
}
m[2]=(5) and 1;
m[3]=1 or 6;
if(1 or 6 == 7){
	m[4]=111;
}
if(2 or 6 == 8){
	m[10000]=111;
}
if(2 | 6 == 8){
	m[10001]=112;
}
if(2 or 6 == 6){
	m[10002]=111;
}
if((2 | 6) == 8){
	m[10003]=112;
}
if((2 | 6) == 1){
	m[10004]=112;
}
if((2 | 6)){
	m[10005]=112;
}
if((0 & 6)){
	m[10006]=112;
}
if(((2>0) | (6<0)) == 0){
	m[10007]=112;
}
if(6 ^ 6){
	m[999]=111;
}
m[6]=(6 or 1)>>3;
m[918]=(!(22==!(!0-1)));
m[0] = (1 && 0) + 3;
m[1]=((1>2)|4)+0;
m[(1>0)]=9;
m[(2 xor 0)]=22;
m[0] = 0;
m[1] = 0;
m[2] = 0;
m[3] = 0;
m[4] = 0;
m[5] = 0;
m[6] = 0;
m[7] = 1;
m[10] = 0;
m[11] = 0;
m[12] = 0;
m[13] = 0;
m[14] = 0;
m[15] = 0;
m[16] = 0;
m[17] = 3;
m[20] = 0;
m[21] = 0;
m[22] = 0;
m[23] = 0;
m[24] = 0;
m[25] = 0;
m[26] = 0;
m[27] = 2;
m[999] = 4;
SECP256K1PrivToPub 0 true;
SECP256K1PrivToPub 10 true;
SECP256K1PrivToPub 20 true;
SECP256K1PointNegate 20 true true;
SECP256K1PointAdd 0 true 10 true true;
SECP256K1PointAdd 0 true 20 true true;

SECP256K1PointScalarMult 10 true 999 4 true;
if((2 | 6) == 1){
	m[10004]=112;
}
if((2 | 6)){
	m[10005]=112;
}
if((0 & 6)){
	m[10006]=112;
}
if(((2>0) | (6<0)) == 0){
	m[10007]=112;
}
verify m[918]==1;